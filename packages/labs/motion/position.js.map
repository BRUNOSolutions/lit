{"version":3,"file":"position.js","sources":["src/position.ts"],"sourcesContent":["import {LitElement} from 'lit-element';\nimport {nothing, AttributePart} from 'lit-html';\nimport {directive, PartInfo, PartType} from 'lit-html/directive.js';\nimport {DisconnectableDirective} from 'lit-html/disconnectable-directive.js';\n\ninterface Positionables {\n  readonly bottom: number;\n  readonly height: number;\n  readonly left: number;\n  readonly right: number;\n  readonly top: number;\n  readonly width: number;\n}\n\nexport type Positions = Array<keyof Positionables>;\n\nconst positionedPoints = ['top', 'right', 'bottom', 'left'];\n\nexport class Position extends DisconnectableDirective {\n  private _host?: LitElement;\n  private _element?: Element;\n  private _targetCb?: () => HTMLElement;\n  private _positions?: Positions;\n\n  constructor(part: PartInfo) {\n    super(part);\n    if (part.type === PartType.CHILD) {\n      throw new Error(\n        'The `flip` directive must be used in attribute position.'\n      );\n    }\n  }\n\n  render(_targetCb: () => HTMLElement, _positions: Positions) {\n    return nothing;\n  }\n\n  update(\n    part: AttributePart,\n    [targetCb, positions]: Parameters<this['render']>\n  ) {\n    if (this._host === undefined) {\n      this._host = part.options?.host as LitElement;\n      this._host.addController(this);\n    }\n    this._element = part.element;\n    this._targetCb = targetCb;\n    this._positions = positions ?? ['left', 'top', 'width', 'height'];\n    return this.render(targetCb, positions);\n  }\n\n  hostUpdated() {\n    this._position();\n  }\n\n  private _position() {\n    const target = this._targetCb?.();\n    const parent = target?.offsetParent;\n    if (target === undefined || !parent) {\n      return;\n    }\n    const tr = target.getBoundingClientRect();\n    const pr = parent.getBoundingClientRect();\n    this._positions?.forEach((p) => {\n      const x = positionedPoints.includes(p) ? tr[p] - pr[p] : tr[p];\n      (this._element as HTMLElement).style[p] = `${x}px`;\n    });\n  }\n}\n\nexport const position = directive(Position);\n"],"names":["positionedPoints","Position","DisconnectableDirective","[object Object]","part","super","type","PartType","CHILD","Error","_targetCb","_positions","nothing","targetCb","positions","undefined","this","_host","options","host","addController","_element","element","render","_position","target","parent","offsetParent","tr","getBoundingClientRect","pr","forEach","p","x","includes","style","position","directive"],"mappings":"kLAgBA,MAAMA,EAAmB,CAAC,MAAO,QAAS,SAAU,cAEvCC,UAAiBC,EAM5BC,YAAYC,GAEV,GADAC,MAAMD,GACFA,EAAKE,OAASC,EAASC,MACzB,MAAUC,MACR,4DAKNN,OAAOO,EAA8BC,GACnC,OAAOC,EAGTT,OACEC,GACCS,EAAUC,IASX,YAPmBC,IAAfC,KAAKC,IACPD,KAAKC,EAAQb,EAAKc,SAASC,KAC3BH,KAAKC,EAAMG,cAAcJ,OAE3BA,KAAKK,EAAWjB,EAAKkB,QACrBN,KAAKN,EAAYG,EACjBG,KAAKL,EAAaG,GAAa,CAAC,OAAQ,MAAO,QAAS,UACjDE,KAAKO,OAAOV,EAAUC,GAG/BX,cACEa,KAAKQ,IAGCrB,IACN,MAAMsB,EAAST,KAAKN,MACdgB,EAASD,GAAQE,aACvB,QAAeZ,IAAXU,IAAyBC,EAC3B,OAEF,MAAME,EAAKH,EAAOI,wBACZC,EAAKJ,EAAOG,wBAClBb,KAAKL,GAAYoB,SAASC,IACxB,MAAMC,EAAIjC,EAAiBkC,SAASF,GAAKJ,EAAGI,GAAKF,EAAGE,GAAKJ,EAAGI,GAC3DhB,KAAKK,EAAyBc,MAAMH,GAAQC,EAAH,eAKnCG,EAAWC,EAAUpC"}