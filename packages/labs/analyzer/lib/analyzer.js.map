{"version":3,"file":"analyzer.js","sourceRoot":"","sources":["../src/lib/analyzer.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2022 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport ts from 'typescript';\nimport {Package, Module} from './model.js';\n\n/**\n * An analyzer for Lit npm packages\n */\nexport class Analyzer {\n  readonly packageRoot: string;\n  readonly commandLine: ts.ParsedCommandLine;\n  readonly program: ts.Program;\n  readonly checker: ts.TypeChecker;\n\n  /**\n   * @param packageRoot The root directory of the package to analyze. Currently\n   * this directory must have a tsconfig.json file.\n   */\n  constructor(packageRoot: string) {\n    this.packageRoot = packageRoot;\n\n    const configFileName = ts.findConfigFile(\n      packageRoot,\n      ts.sys.fileExists,\n      'tsconfig.json'\n    );\n    if (configFileName === undefined) {\n      // TODO: use a hard-coded tsconfig for JS projects.\n      throw new Error('tsconfig not found');\n    }\n    const configFile = ts.readConfigFile(configFileName, ts.sys.readFile);\n    this.commandLine = ts.parseJsonConfigFileContent(\n      configFile.config,\n      ts.sys,\n      packageRoot\n    );\n    this.program = ts.createProgram(\n      this.commandLine.fileNames,\n      this.commandLine.options\n    );\n    this.checker = this.program.getTypeChecker();\n  }\n\n  analyzePackage() {\n    const diagnostics = this.program.getSemanticDiagnostics();\n    if (diagnostics.length > 0) {\n      console.error('Please fix errors first');\n      console.error(diagnostics);\n      throw new Error('Copmiler errors');\n    }\n    const rootFileNames = this.program.getRootFileNames();\n    const modules = [];\n    for (const fileName of rootFileNames) {\n      modules.push(this.analyzeFile(fileName));\n    }\n    // TODO: return a package object...\n    return new Package(modules);\n  }\n\n  analyzeFile(fileName: string) {\n    const sourceFile = this.program.getSourceFile(fileName)!;\n\n    return new Module(sourceFile);\n  }\n\n  private _isLitElementClassDeclaration = (t: ts.BaseType) => {\n    const declarations = t.getSymbol()?.getDeclarations();\n    if (declarations?.length !== 1) {\n      return false;\n    }\n    const node = declarations[0];\n    return (\n      this._isLitElementModule(node.getSourceFile()) &&\n      ts.isClassDeclaration(node) &&\n      node.name?.getText() === 'LitElement'\n    );\n  };\n\n  private _isLitElementModule = (file: ts.SourceFile) => {\n    return file.fileName.endsWith('/node_modules/lit-element/lit-element.d.ts');\n  };\n\n  isLitElement = (node: ts.Node): node is ts.ClassDeclaration => {\n    if (!ts.isClassLike(node)) {\n      return false;\n    }\n    const type = this.checker.getTypeAtLocation(node) as ts.InterfaceType;\n    const baseTypes = this.checker.getBaseTypes(type);\n    for (const t of baseTypes) {\n      if (this._isLitElementClassDeclaration(t)) {\n        return true;\n      }\n    }\n    return false;\n  };\n}\n"]}